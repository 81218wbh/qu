;; DO NOT EDIT THIS FILE
;; This file was auto-generated by slothcfg.
;; Your changes could get overwritten by slothcfg.
;; DO NOT EDIT THIS FILE

(ns qu.project)

(defonce project (atom '{:compile-path "/Users/dreisbachc/Projects/qu/qu-core/target/classes", :group "qu", :embongo {:port 37017, :version "2.4.8"}, :global-vars {}, :repl-options {:init-ns user}, :dependencies ([org.clojure/clojure "1.5.1"] [caribou/antlers "0.6.1"] [cheshire/cheshire "5.3.1"] [clj-statsd/clj-statsd "0.3.10"] [clj-time/clj-time "0.6.0"] [clojurewerkz/route-one "1.1.0"] [clojurewerkz/urly "2.0.0-alpha5" :exclusions ([com.google.guava/guava])] [com.novemberain/monger "1.7.0"] [com.stuartsierra/component "0.2.1"] [com.stuartsierra/dependency "0.1.1"] [com.taoensso/timbre "3.0.1" :exclusions ([expectations/expectations])] [compojure/compojure "1.1.6" :exclusions ([ring/ring-core])] [digest/digest "1.4.3"] [environ/environ "0.4.0"] [halresource/halresource "0.1.1-20130809.164342-1"] [http-kit/http-kit "2.1.17"] [liberator/liberator "0.10.0"] [lonocloud/synthread "1.0.5"] [org.clojure/core.cache "0.6.3"] [org.clojure/data.csv "0.1.2"] [org.clojure/data.json "0.2.4"] [org.codehaus.jsr166-mirror/jsr166y "1.7.0"] [parse-ez/parse-ez "0.3.6"] [prismatic/schema "0.2.1"] [ring/ring "1.2.1"] [ring.middleware.mime-extensions/ring.middleware.mime-extensions "0.2.0"] [ring-middleware-format/ring-middleware-format "0.3.2"] [scriptjure/scriptjure "0.1.24"] [org.clojure/tools.nrepl "0.2.3" :exclusions ([org.clojure/clojure])] [clojure-complete/clojure-complete "0.2.3" :exclusions ([org.clojure/clojure])] [alembic/alembic "0.2.0"] [criterium/criterium "0.4.2"] [org.clojure/tools.namespace "0.2.4"] [alembic/alembic "0.2.1"] [clj-http/clj-http "0.7.9"] [factual/drake "0.1.3-SNAPSHOT"] [org.clojure/java.classpath "0.2.2"] [ring-mock/ring-mock "0.1.5"] [codox-md/codox-md "0.2.0"]), :plugin-repositories [["central" {:snapshots false, :url "http://repo1.maven.org/maven2/"}] ["clojars" {:url "https://clojars.org/repo/"}]], :slothcfg {:config-source-path "src", :namespace qu.project}, :build-url nil, :test-selectors {:default (fn [t] (not (:integration t)) constantly true), :all (constantly true)}, :git-commit nil, :codox {:output-dir "doc/codox", :src-dir-uri "https://github.com/qu-platform/qu-core/blob/master", :src-linenum-anchor-prefix "L", :writer codox-md.writer/write-docs}, :target-path "/Users/dreisbachc/Projects/qu/qu-core/target", :name "qu-core", :test2junit-output-dir "test-results", :deploy-repositories [["clojars" {:username :gpg, :url "https://clojars.org/repo/", :password :gpg}]], :root "/Users/dreisbachc/Projects/qu/qu-core", :build-number "handbuilt", :offline? false, :source-paths ("/Users/dreisbachc/Projects/qu/qu-core/dev" "/Users/dreisbachc/Projects/qu/qu-core/src"), :certificates ["clojars.pem"], :version "1.1.0-SNAPSHOT", :env {:mongo-port 37017, :integration true, :dev true}, :jar-exclusions (#"^\." #"(^|/)\." #"datasets/.*"), :profiles {:integration [:default {:embongo {:port 37017}, :test-selectors {:default (constantly true)}, :env {:integration true, :mongo-port 37017}}], :uberjar {:env {:dev false}, :aot :all}, :test {:injections [(taoensso.timbre/set-level! :error)]}, :dev {:embongo {:version "2.4.8"}, :dependencies [[alembic "0.2.1"] [clj-http "0.7.9"] [factual/drake "0.1.3-SNAPSHOT"] [org.clojure/tools.namespace "0.2.4"] [org.clojure/java.classpath "0.2.2"] [ring-mock "0.1.5"] [codox-md "0.2.0"]], :codox {:output-dir "doc/codox", :src-dir-uri "https://github.com/qu-platform/qu-core/blob/master", :src-linenum-anchor-prefix "L", :writer codox-md.writer/write-docs}, :source-paths ["dev"], :env {:dev true}}}, :prep-tasks ["javac" "compile"], :url "https://github.com/qu-platform/qu-core", :repositories [["central" {:snapshots false, :url "http://repo1.maven.org/maven2/"}] ["clojars" {:url "https://clojars.org/repo/"}]], :resource-paths ("/Users/dreisbachc/Projects/qu/qu-core/dev-resources" "/Users/dreisbachc/Projects/qu/qu-core/resources"), :uberjar-exclusions (#"(?i)^META-INF/[^/]*\.(SF|RSA|DSA)$" #"(^|/)\." #"datasets/.*" #"META-INF/.*\.SF" #"META-INF/.*\.[RD]SA"), :main qu.main, :min-lein-version "2.0.0", :jvm-opts ["-XX:+TieredCompilation" "-XX:TieredStopAtLevel=1"], :eval-in :subprocess, :plugins ([lein-environ/lein-environ "0.4.0"] [lein-embongo/lein-embongo "0.2.1"] [lein-cloverage/lein-cloverage "1.0.2"] [test2junit/test2junit "1.0.1"] [slothcfg/slothcfg "1.0.1"] [codox/codox "0.6.4"] [lein-kibit/lein-kibit "0.0.8"] [lein-ancient/lein-ancient "0.5.3"] [lein-marginalia/lein-marginalia "0.7.1"] [lein-grep/lein-grep "0.1.0"] [lein-bikeshed/lein-bikeshed "0.1.3"] [lein-try/lein-try "0.4.1"] [lein-pprint/lein-pprint "1.1.1"]), :injections ((do (clojure.core/ns leiningen.core.injected) (defn- hooks [v] (-> (clojure.core/deref v) meta :leiningen.core.project/hooks)) (defn- original [v] (-> (clojure.core/deref v) meta :leiningen.core.project/original)) (defn- compose-hooks [f1 f2] (fn [& args] (apply f2 f1 args))) (defn- join-hooks [original hooks] (reduce compose-hooks original hooks)) (defn- run-hooks [hooks original args] (apply (join-hooks original hooks) args)) (defn- prepare-for-hooks [v] (when-not (hooks v) (let [hooks (atom {})] (alter-var-root v (fn [original] (with-meta (fn [& args] (run-hooks (vals (clojure.core/deref hooks)) original args)) (assoc (meta original) :leiningen.core.project/hooks hooks :leiningen.core.project/original original))))))) (defonce hook-scopes []) (defn start-scope [] (locking hook-scopes (alter-var-root (var hook-scopes) conj {}))) (defn- scope-update-fn [scopes target-var] (conj (pop scopes) (update-in (peek scopes) [target-var] (fn* [p1__404#] (if p1__404# p1__404# (clojure.core/deref (hooks target-var))))))) (defn- possibly-record-in-scope [target-var] (locking hook-scopes (when (seq hook-scopes) (alter-var-root (var hook-scopes) scope-update-fn target-var)))) (defn end-scope [] (locking hook-scopes (let [head (peek hook-scopes)] (alter-var-root (var hook-scopes) pop) (doseq [[var old-hooks] head] (reset! (hooks var) old-hooks))))) (defmacro with-scope "Defines a scope which records any change to hooks during the dynamic extent\nof its body, and restores hooks to their original state on exit of the scope." [& body] (clojure.core/seq (clojure.core/concat (clojure.core/list (quote try)) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote leiningen.core.project/start-scope))))) body (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote finally)) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote leiningen.core.project/end-scope))))))))))) (defn add-hook "Add a hook function f to target-var. Hook functions are passed the\n  target function and all their arguments and must apply the target to\n  the args if they wish to continue execution." ([target-var f] (add-hook target-var f f)) ([target-var key f] (prepare-for-hooks target-var) (possibly-record-in-scope target-var) (swap! (hooks target-var) assoc key f))) (defn- clear-hook-mechanism [target-var] (alter-var-root target-var (constantly (original target-var)))) (defn remove-hook "Remove hook identified by key from target-var." [target-var key] (when-let [hooks (hooks target-var)] (swap! hooks dissoc key) (when (empty? (clojure.core/deref hooks)) (clear-hook-mechanism target-var)))) (defn clear-hooks "Remove all hooks from target-var." [target-var] (when-let [hooks (hooks target-var)] (swap! hooks empty) (clear-hook-mechanism target-var))) (defmacro prepend [target-var & body] (clojure.core/seq (clojure.core/concat (clojure.core/list (quote leiningen.core.project/add-hook)) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote var)) (clojure.core/list target-var)))) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core/fn)) (clojure.core/list (clojure.core/apply clojure.core/vector (clojure.core/seq (clojure.core/concat (clojure.core/list (quote f__405__auto__)) (clojure.core/list (quote &)) (clojure.core/list (quote args__406__auto__)))))) body (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core/apply)) (clojure.core/list (quote f__405__auto__)) (clojure.core/list (quote args__406__auto__))))))))))) (defmacro append [target-var & body] (clojure.core/seq (clojure.core/concat (clojure.core/list (quote leiningen.core.project/add-hook)) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote var)) (clojure.core/list target-var)))) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core/fn)) (clojure.core/list (clojure.core/apply clojure.core/vector (clojure.core/seq (clojure.core/concat (clojure.core/list (quote f__407__auto__)) (clojure.core/list (quote &)) (clojure.core/list (quote args__408__auto__)))))) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core/let)) (clojure.core/list (clojure.core/apply clojure.core/vector (clojure.core/seq (clojure.core/concat (clojure.core/list (quote val__409__auto__)) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core/apply)) (clojure.core/list (quote f__407__auto__)) (clojure.core/list (quote args__408__auto__))))))))) body (clojure.core/list (quote val__409__auto__))))))))))) (defmacro with-hooks-disabled [f & body] (clojure.core/seq (clojure.core/concat (clojure.core/list (quote do)) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core/when-not)) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote var)) (clojure.core/list (quote leiningen.core.project/hooks))))) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote var)) (clojure.core/list f))))))) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote throw)) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote java.lang.Exception.)) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core/str)) (clojure.core/list "No hooks on ") (clojure.core/list f))))))))))))) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core/with-redefs)) (clojure.core/list (clojure.core/apply clojure.core/vector (clojure.core/seq (clojure.core/concat (clojure.core/list f) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote var)) (clojure.core/list (quote leiningen.core.project/original))))) (clojure.core/list (clojure.core/seq (clojure.core/concat (clojure.core/list (quote var)) (clojure.core/list f))))))))))) body)))))) (clojure.core/ns user)) (taoensso.timbre/set-level! :error)), :native-path "/Users/dreisbachc/Projects/qu/qu-core/target/native", :description "qu is an **in-progress** data platform created by the CFPB to\nserve their public data sets.", :uberjar-merge-with {"META-INF/plexus/components.xml" leiningen.uberjar/components-merger, "data_readers.clj" leiningen.uberjar/clj-map-merger}, :test-paths ("/Users/dreisbachc/Projects/qu/qu-core/test"), :clean-targets [:target-path], :aliases {"coverage" ["with-profile" "integration" "embongo" "cloverage"], "jenkins" ["with-profile" "integration" "embongo" "test2junit"]}}))

(reset-meta! project '{:included-profiles (:integration :leiningen/test :test), :without-profiles {:compile-path "%s/classes", :group "qu", :global-vars {}, :repl-options {:init-ns user}, :dependencies ([org.clojure/clojure "1.5.1"] [caribou/antlers "0.6.1"] [cheshire/cheshire "5.3.1"] [clj-statsd/clj-statsd "0.3.10"] [clj-time/clj-time "0.6.0"] [clojurewerkz/route-one "1.1.0"] [clojurewerkz/urly "2.0.0-alpha5" :exclusions ([com.google.guava/guava])] [com.novemberain/monger "1.7.0"] [com.stuartsierra/component "0.2.1"] [com.stuartsierra/dependency "0.1.1"] [com.taoensso/timbre "3.0.1" :exclusions ([expectations/expectations])] [compojure/compojure "1.1.6" :exclusions ([ring/ring-core])] [digest/digest "1.4.3"] [environ/environ "0.4.0"] [halresource/halresource "0.1.1-20130809.164342-1"] [http-kit/http-kit "2.1.17"] [liberator/liberator "0.10.0"] [lonocloud/synthread "1.0.5"] [org.clojure/core.cache "0.6.3"] [org.clojure/data.csv "0.1.2"] [org.clojure/data.json "0.2.4"] [org.codehaus.jsr166-mirror/jsr166y "1.7.0"] [parse-ez/parse-ez "0.3.6"] [prismatic/schema "0.2.1"] [ring/ring "1.2.1"] [ring.middleware.mime-extensions/ring.middleware.mime-extensions "0.2.0"] [ring-middleware-format/ring-middleware-format "0.3.2"] [scriptjure/scriptjure "0.1.24"]), :plugin-repositories [["central" {:snapshots false, :url "http://repo1.maven.org/maven2/"}] ["clojars" {:url "https://clojars.org/repo/"}]], :slothcfg {:config-source-path "src", :namespace qu.project}, :build-url nil, :test-selectors {:default (fn [t] (not (:integration t))), :all (constantly true)}, :git-commit nil, :target-path "target", :name "qu-core", :test2junit-output-dir "test-results", :deploy-repositories [["clojars" {:username :gpg, :url "https://clojars.org/repo/", :password :gpg}]], :root "/Users/dreisbachc/Projects/qu/qu-core", :build-number "handbuilt", :offline? false, :source-paths ("src"), :certificates ["clojars.pem"], :version "1.1.0-SNAPSHOT", :jar-exclusions (#"^\." #"(^|/)\." #"datasets/.*"), :profiles {:integration [:default {:embongo {:port 37017}, :test-selectors {:default (constantly true)}, :env {:integration true, :mongo-port 37017}}], :uberjar {:env {:dev false}, :aot :all}, :test {:injections [(taoensso.timbre/set-level! :error)]}, :dev {:embongo {:version "2.4.8"}, :dependencies [[alembic "0.2.1"] [clj-http "0.7.9"] [factual/drake "0.1.3-SNAPSHOT"] [org.clojure/tools.namespace "0.2.4"] [org.clojure/java.classpath "0.2.2"] [ring-mock "0.1.5"] [codox-md "0.2.0"]], :codox {:output-dir "doc/codox", :src-dir-uri "https://github.com/qu-platform/qu-core/blob/master", :src-linenum-anchor-prefix "L", :writer codox-md.writer/write-docs}, :source-paths ["dev"], :env {:dev true}}}, :prep-tasks ["javac" "compile"], :url "https://github.com/qu-platform/qu-core", :repositories [["central" {:snapshots false, :url "http://repo1.maven.org/maven2/"}] ["clojars" {:url "https://clojars.org/repo/"}]], :resource-paths ("resources"), :uberjar-exclusions (#"(?i)^META-INF/[^/]*\.(SF|RSA|DSA)$" #"(^|/)\." #"datasets/.*" #"META-INF/.*\.SF" #"META-INF/.*\.[RD]SA"), :main qu.main, :min-lein-version "2.0.0", :jvm-opts nil, :eval-in :subprocess, :plugins ([lein-environ/lein-environ "0.4.0"] [lein-embongo/lein-embongo "0.2.1"] [lein-cloverage/lein-cloverage "1.0.2"] [test2junit/test2junit "1.0.1"] [slothcfg/slothcfg "1.0.1"] [codox/codox "0.6.4"]), :native-path "%s/native", :description "qu is an **in-progress** data platform created by the CFPB to\nserve their public data sets.", :uberjar-merge-with {"META-INF/plexus/components.xml" leiningen.uberjar/components-merger, "data_readers.clj" leiningen.uberjar/clj-map-merger}, :test-paths ("test"), :clean-targets [:target-path], :aliases {"coverage" ["with-profile" "integration" "embongo" "cloverage"], "jenkins" ["with-profile" "integration" "embongo" "test2junit"]}}})